<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ggplot气泡图分析KEGG基因富集通路]]></title>
    <url>%2F2019%2F03%2F27%2Fggplot%E6%B0%94%E6%B3%A1%E5%9B%BE%E5%88%86%E6%9E%90KEGG%E5%9F%BA%E5%9B%A0%E5%AF%8C%E9%9B%86%E9%80%9A%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[&emsp;1. 导入数据（包含KEGG通路及各通路基因富集数、P值和富集分数的csv格式文件）12x &lt;- read.csv("你的csv文件.csv") #导入csv格式数据为xx #显示数据 我们的数据显示出来是这样的：1234567891011 Term GeneNumber pValue RichFactor1 Spliceosome 12 0.004143058 2.6375142 Arginine biosynthesis 3 0.042939696 4.3518993 Antigen processing and presentation 6 0.051676443 2.4177224 mTOR signaling pathway 10 0.055317720 1.8962525 cAMP signaling pathway 11 0.109859128 1.6037156 p53 signaling pathway 5 0.110785204 2.1023677 MicroRNAs in cancer 9 0.116145959 1.6738078 MAPK signaling pathway 13 0.132300704 1.4849009 Toll-like receptor signaling pathway 5 0.280225219 1.48023810 Apoptosis 5 0.553767557 1.043621 &emsp;2. 加载ggplot2并绘制气泡图1234library(ggplot2) #加载ggplot包y &lt;- ggplot(x, aes(x=RichFactor, y=Term, size=GeneNumber, color=-1*log10(pValue))) + geom_point() + scale_colour_gradient(low="green",high="red") + labs(color=expression(-log[10](pValue)),size="Gene number", x="Rich factor",y="Pathway name",title="Pathway enrichment")# 画图确定x、y轴并根据通路富集基因数改变点的大小，根据p值大小改变点的颜色 + 自定义p值的渐变颜色 + 设置标题及标注名称y #显示气泡图 &emsp;3. 调整并保存气泡图1ggsave("名称.png",width=5.5,height=4) #调整气泡图的宽度和高度]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将Excel文档转换为CSV格式导入R以及R数据框导出为CSV]]></title>
    <url>%2F2018%2F09%2F11%2F%E5%B0%86Excel%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2%E4%B8%BAcsv%E6%A0%BC%E5%BC%8F%E5%AF%BC%E5%85%A5R%2F</url>
    <content type="text"><![CDATA[&emsp;1. 将Excel表格并另存为CSV(逗号分隔)格式文件；&emsp;2. 如有引号，用记事本打开CSV，确认文本中不含有中文符号，文本编码最好为ANSI格式；&emsp;3. 将CSV放入R目前工作目录（getwd()显示当前工作目录）后，运行：12x &lt;- read.table("文件名.csv", header=TRUE, row.names="第一列", sep=",")colClasses=c("") &emsp;&emsp;header=TRUE：第一行包含变量名。row.names：行名，指定一个或多个行标记符。sep=”,”：读取逗号分隔的行内数据文件。colClasses：对每一列都指定一个类（逻辑型、数值型、字符型、因子型等），如numeric 数值型变量、character 字符型向量，NULL则跳过该列。1str(x) &emsp;&emsp;显示对象结构。 &emsp;4. 将数据框输出为.csv文件：1write.table(数据框, "文件名.csv", quote=FALSE, sep=",", row.names=FALSE, col.names=TRUE)]]></content>
      <categories>
        <category>R语言</category>
      </categories>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建 Hexo+Github+域名 个人博客]]></title>
    <url>%2F2017%2F11%2F25%2F%E6%90%AD%E5%BB%BA-Hexo%2BGithub%2B%E5%9F%9F%E5%90%8D-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[&emsp;&nbsp;Maybe you just want to write your blog, but if you don’t have a site for yourself, your blog couln’t really belong to you. It is a place where you release your true nature, a place where you find joy in the process of blogging: you blogging in your own site. Make your own site, it may be your_name.com or something else, then Hexo and GitHub help adding your blog into your site, and you blog in your own site.&emsp;&nbsp;There are some experiences I have summarized when I made my own site blog: &emsp;一、下载安装 Git 和 Node.js：&emsp;&emsp;● GitHub 是一个代码托管平台，只支持 Git 作为唯一的版本库格式进行托管，我们可以把本地的网页和文章提交到 GitHub 上。而 Hexo 博客系统基于 Node.js 编写。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。在官网下载 Git 和 Node.js： &emsp;Git 官网：https://git-scm.com&emsp;Node 官网：https://nodejs.org/en/&emsp;安装后打开 Git Bash 输入以下命令查看版本号确认安装成功:1$ git --version &emsp;同样的输入查看 Node.js 的版本号:12$ node -v$ npm -v &emsp;● 安装完成后重启电脑 &emsp;二、安装 Hexo 和 NexT 主题：&emsp;（一）安装 Hexo：&emsp;&emsp;● Hexo 是一款静态博客生成器。它是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。静态的意思是指生成的博客网站访客只能浏览，没法像淘宝那样在我们的网站上提交信息。Hexo 负责把我们写的 Markdown 文件根据选定的主题（规定网站的外观样式的文件）生成一堆 HTML 以及负责外观样式的 CSS 和 Javascript 文件。此外，Hexo 还提供了帮我们把这一堆 HTML、CSS、Javascript 文件上传到 Github 服务器的功能，也就是部署。 &emsp;Hexo 主页：https://hexo.io/zh-cn/&emsp;在 Git Bash 命令行输入（如出现 WARN 不会影响正常使用）：1$ npm install hexo-cli -g &emsp;安装完成后执行以下命令初始化 Hexo：123$ cd f:/hexo #your-hexo-site$ hexo init$ npm install &emsp;Hexo 将会在指定文件夹中新建所需要的文件，新建完成后指定文件夹的目录如下：12345678910111213141516171819├── .deploy #需要部署的文件├── node_modules #Hexo插件├── public #生成的静态网页文件├── scaffolds #模板├── source #博客正文和其他源文件，404、favicon、CNAME 都应该放在这里| ├── _drafts #草稿| └── _posts #文章├── themes #主题├── _config.yml #全局配置文件└── package.json #npm 依赖等 &emsp;也可以查看 Hexo 的版本来确认安装成功：1$ hexo v &emsp;执行命令后会出现以下结果：1234567891011121314151617$ hexo vhexo: 3.4.2hexo-cli: 1.0.4os: Windows_NT 10.0.15063 win32 x64http_parser: 2.7.0node: 8.9.1v8: 6.1.534.47uv: 1.15.0zlib: 1.2.11ares: 1.10.1-DEVmodules: 57nghttp2: 1.25.0openssl: 1.0.2micu: 59.1unicode: 9.0cldr: 31.0.1tz: 2017b &emsp;最后启动本地 Hexo 站点：1$ hexo s &emsp;如果 http://localhost:4000 （如打不开可执行 $ hexo s -p 2000 并访问 http://localhost:2000 ）能够正常访问，则说明 Hexo 本地博客已经搭建好了。&emsp;最后可以修改站点配置文件 _config.yml，添加自己的博客信息：1234567# Sitetitle: your_blog_namesubtitle: introduction under your_blog_namedescription: introductiuon under your_nameauthor: your_namelanguage: zh-Hanstimezone: &emsp;（二）安装 NexT 主题：&emsp;NexT 官网：http://theme-next.iissnan.com&emsp;在 Git Bash 窗口输入以下命令：12$ cd f:/hexo$ git clone https://github.com/iissnan/hexo-theme-next themes/next &emsp;最后在 f:/hexo（即你指定的文件夹）中打开 _config.yml （站点配置文件）文件，找到 theme 字段，并将其值更改为 next：1theme: next &emsp;最后启动本地 Hexo 站点并开启调试模式（即加上 –debug）：1$ hexo s --debug &emsp;用浏览器访问 http://localhost:4000 ，检查 NexT 主题是否安装成功。最后可以在主题配置文件 themes/next/_config.yml 中选择你想要的 NexT 主题风格：12345# Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini &emsp;以及主页需要显示的菜单：123456789menu: home: / || home about: /about/ || user tags: /tags/ || tags categories: /categories/ || th archives: /archives/ || archive #schedule: /schedule/ || calendar #sitemap: /sitemap.xml || sitemap #commonweal: /404/ || heartbeat &emsp;三、注册并关联 GitHub：&emsp;（一）注册 GitHub：&emsp;&emsp;● Github Page：我们平时在新浪上看新闻的时候，所有的东西都要从新浪服务器发送到我们的手机、电脑上。我们的网站也一样，需要一个服务器，把用 Hexo 生成的那些 HTML、CSS、Javascript 文件发送给访客。但我们自己没有服务器呀？Github Pages 是 Github 提供的一项免费的静态页面托管服务，提供 your_name.github.io 的域名（your_name 为你的 Github 用户名）发布自己的静态网站。我们把 Hexo 生成的内容上传到 Github 服务器，访客的浏览器就是从 Github 服务器获取相关文件的。 &emsp;GitHub 官网：https://github.com&emsp;注册时你填写的Username即是你的域名：username.github.com。比如我用ijianlei为用户名（Username）注册了 GitHub，新建 repository（New repository）时以 ijianlei.github.io（必须与用户名保持一致）新建一个 repository，在 ijianlei.github.io 的设置（Settings）里选择一个主题（choose a theme）后就可以访问 ijianlei.github.io 这个网址了。 &emsp;（二）关联 GitHub Pages 到 Hexo：&emsp;输入你注册 GitHub 时所用的邮箱生成 SSH Key：1$ ssh-keygen -t rsa -C "your_registered_email" &emsp;回车后会提示你输入一个密码，直接回车设置为空，直接回车确认密码为空（不设置密码）。用记事本打开 C:\Users\bxm09.ssh\id_rsa.pub，复制 SSH Key 到 https://github.com/settings/ssh 里新建的 new SSH key，最后输入以下命令：1$ ssh -T git@github.com &emsp;如出现：123The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? &emsp;输入 yes 回车后出现以下文字则设置成功：1Hi aierui! You've successfully authenticated, but GitHub does not provide shell access. &emsp;现在已经可以通过 SSH 链接到 GitHub，最后输入以下命令完善你的 GitHub 用户名和邮箱，Git 会根据用户的名字和邮箱来记录提交：12$ git config --global user.name "your_username" &amp; git config --global user.email "your_registered_email" &emsp;最后在站点配置文件 f:/hexo/_config.yml 中修改以下 Deployment 信息，输入你的用户信息：1234deploy: type: git repo: git@github.com:ijianlei/ijianlei.github.io.git branch: master &emsp;然后在 Git Bash 窗口依次执行以下命令：123$ npm install hexo-deployer-git --save$ hexo clean$ hexo d &emsp;大功告成，在浏览器中输入 ijianlei.github.io （换成 your_username）就进入你的 Hexo Blog 啦！&emsp;若需要将本地hexo文件夹同步到一台新的电脑上（或者重装电脑），则需要安装 Git 和 Node，并依次执行：123456$ npm install hexo-cli -g$ cd f:/hexo$ hexo v # 确认 hexo 关联成功$ npm install hexo-deployer-git --save$ hexo clean # 删除 .deploy_git 和 public 文件夹后执行该命令$ hexo d -g &emsp;四、绑定独立域名：&emsp;（一）购买属于自己的一级域名：&emsp;Godaddy、DNSPod、Gandi、阿里云… &emsp;（二）域名解析将 your_name.github.io 指定到你的域名：&emsp;以阿里云域名为例，在 控制台-域名与网站（万网）-域名-解析-添加解析 中添加两个解析：记录类型：A 主机纪录：@ 解析线路(isp)：默认值 记录值：192.30.252.153 和 192.30.252.154。&emsp;● 192.30.252.153 和 192.30.252.154 为 GIthub 服务器的 IP 地址，可以从 Github 的官方文档 Configuring A records with your DNS provider 知道。&emsp;最后在 f:/hexo/source 中新建一个 CNAME （大写 无后缀）的文件，用记事本键入你的域名（只能一个且不能加 http:// ），再次运行以下命令：12$ hexo clean$ hexo d &emsp;到此，当你在浏览器中输入 your_name.github.io 网页就会自动跳转到你的域名，且显示为你的 Hexo Blog 网站信息。同样的你的域名就是你的 Hexo Blog 地址。 &emsp;五、发表文章：&emsp;键入以下命令：12$ cd f:/hexo$ hexo new "your_title" &emsp;这样在本地博客文件夹 source_posts 文件夹下我们可以找到新建的 markdown 文件。&emsp;每次写完文章之后依次执行以下命令就可以发布更新了：123$ hexo clean #清除缓存$ hexo g #生成静态网页文件$ hexo d #将本地博客发布到GitHub &emsp;如 GitHub 博客网页未刷新，可先启动本地 Hexo 站点 $ hexo s 并用浏览器访问 http://localhost:4000 进行刷新,然后再刷新 GitHub 博客网页。 &emsp;六、参考：&emsp;● 可能是最详细的 Hexo + GitHub Pages 搭建博客的教程&emsp;作者：白小明0927&emsp;链接：http://www.jianshu.com/p/39562a0d8eb6&emsp;● 知行合一 | 用 Hexo 搭建博客&emsp;作者：Grok&emsp;链接：http://lowrank.science/Hexo-Github/&emsp;● GitHub Pages 指南&emsp;作者：极客学院&emsp;链接：http://wiki.jikexueyuan.com/project/github-pages-basics/]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F11%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment var gitment = new Gitment({ id: location.href owner: 33879410 repo: gitment oauth: { client_id: 0e5e3ec686cc8927173e client_secret: 7e2857b0756740ed98222b246277ba2fb2743f6b }, }) gitment.render('container')]]></content>
  </entry>
</search>
